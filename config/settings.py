"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import dj_database_url
from decouple import config, Csv  
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="localhost,127.0.0.1,bienestar.localhost,mindcare.localhost,*.localhost,*.127.0.0.1.nip.io", cast=Csv())

# Application definition

# --- APLICACIONES COMPARTIDAS ---
# Solo lo absolutamente esencial que es global para todas las clínicas.
# --- APLICACIONES COMPARTIDAS ---
SHARED_APPS = (
    'django_tenants',  # Componente principal de django-tenants
    'apps.tenants',    # App para gestionar las clínicas
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'channels',  # Para WebSocket
    
    # ⚠️ CRÍTICO: AUTH y ADMIN deben estar en SHARED para que funcione el middleware
    'django.contrib.auth',
    'django.contrib.admin',  # <-- MOVIDO AQUÍ desde TENANT_APPS
    
    'apps.users',  # Modelo de usuario personalizado debe estar en SHARED_APPS
    'apps.authentication',  # ⚠️ CRÍTICO: Para que /api/auth/ funcione en público
    'apps.payment_system',  # ⚠️ CRÍTICO: Para webhooks de Stripe en público
    'rest_framework',       # ⚠️ CRÍTICO: Para que funcione api-auth
    'rest_framework.authtoken',  # ⚠️ CRÍTICO: Para tokens en público
)

# --- APLICACIONES DEL INQUILINO (TENANT) ---
# Todo lo que una clínica individual necesita.
TENANT_APPS = (
    # Apps de Django (ya están en SHARED_APPS, no necesitan repetirse)
    # 'django.contrib.admin',  # <-- REMOVIDO: Ya está en SHARED_APPS
    'django.contrib.auth',       # Necesario para permisos por tenant
    'django.contrib.contenttypes',  # También necesario en tenants
    'django.contrib.sessions',      # También necesario en tenants  
    'django.contrib.messages',      # También necesario en tenants
    'rest_framework',
    'rest_framework.authtoken',
    
    # Todas tus apps funcionales específicas de cada clínica
    'apps.users',
    'apps.authentication',
    'apps.professionals',
    'apps.appointments',
    'apps.chat',
    'apps.clinical_history',
    'apps.clinic_admin',  # Administración interna de la clínica (CU-30, CU-07)
    'apps.payment_system',  # Sistema de pagos con Stripe
    'apps.backups',  # <-- AÑADE ESTA LÍNEA
    'apps.auditlog',  # Sistema de bitácora de auditoría
)

# --- CONFIGURACIÓN FINAL DE INSTALLED_APPS ---
# Django usará esta lista combinada.
INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',  # DEBE ser el primero
    'apps.auditlog.local.RequestLocalStorageMiddleware',  # Capturar request para logs
   'fix_tenant_middleware.FixTenantURLConfMiddleware',  # ❌ DESHABILITADO: Interfiere con django-tenants
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuración de URLs para django-tenants
ROOT_URLCONF = 'config.urls_public'  # Para el tenant público (localhost)
TENANT_URLCONF = 'config.urls'       # Para los tenants de clínicas (bienestar.localhost, mindcare.localhost)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
         'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=config("DATABASE_URL"),
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Configurar el backend específico para django-tenants
DATABASES['default']['ENGINE'] = 'django_tenants.postgresql_backend'

# --- CONFIGURACIÓN DE DJANGO-TENANTS ---
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

# Modelo que representa a cada inquilino (clínica)
TENANT_MODEL = "tenants.Clinic"

# URL del esquema público (donde vivirá la gestión de clínicas)
TENANT_DOMAIN_MODEL = "tenants.Domain"

# ⚠️ CRÍTICO: Nombre del esquema público (REQUERIDO por django-tenants)
PUBLIC_SCHEMA_NAME = 'public'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/La_Paz'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploaded files)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'

# Backend de autenticación personalizado para multi-tenant
AUTHENTICATION_BACKENDS = [
    'apps.tenants.auth_backends.TenantAwareAuthBackend',
    # No incluir ModelBackend estándar ya que TenantAwareAuthBackend lo reemplaza
]

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 30,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

# URLs de producción y desarrollo
CORS_ALLOWED_ORIGINS = [
    "https://psico-admin-sp1-despliegue-front.vercel.app",
    # Puertos locales comunes para desarrollo
    "http://localhost:3000",      # React (Create React App)
    "http://localhost:5173",      # Vite
    "http://localhost:5174",      # Vite (puerto alternativo)
    "http://localhost:8080",      # Vue/webpack
    "http://localhost:4200",      # Angular
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
    # Subdominios específicos para desarrollo
    "http://bienestar.localhost:5174",
    "http://mindcare.localhost:5174",
    "http://bienestar.localhost:3000",
    "http://mindcare.localhost:3000",
    "http://bienestar.localhost:5173",
    "http://mindcare.localhost:5173",
]

# Patrones regex para permitir cualquier subdominio localhost
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://\w+\.localhost:\d+$",     # Permite http://<cualquier-cosa>.localhost:<puerto>
    r"^http://localhost:\d+$",          # Permite http://localhost:<puerto>
    r"^http://127\.0\.0\.1:\d+$",       # Permite http://127.0.0.1:<puerto>
    r"^https://\w+\.localhost:\d+$",    # Permite https://<cualquier-cosa>.localhost:<puerto>
]
# Asegúrate de que esta línea también esté presente
CORS_ALLOW_CREDENTIALS = True

# Headers permitidos para las solicitudes CORS
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'expires',
    # Headers adicionales para APIs
    'x-api-key',
    'x-client-type',
]

# Métodos HTTP permitidos
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
# Configuración de ASGI para que Django Channels sea el punto de entrada
ASGI_APPLICATION = 'config.asgi.application'

# Configuración del "Channel Layer" que usará Redis como intermediario
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
   
    },
}
# URL donde corre tu App de React (Vite usa el puerto 5173 por defecto)
FRONTEND_URL_LOCAL = 'https://psico-admin-sp1-despliegue-front.vercel.app'
# ---------------------------------------------------------------
# CONFIGURACIÓN DE CORREO (SMTP DE GMAIL) PARA PSICO SAS
# ---------------------------------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # <-- ¡LÍNEA CORREGIDA! (Sin el #)
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# --- Tus Credenciales ---
EMAIL_HOST_USER = 'isaelortiz74@gmail.com'
EMAIL_HOST_PASSWORD = 'jyce eils gnvi vsju' 
# -----------------------

DEFAULT_FROM_EMAIL = 'Equipo de Psico SAS <isaelortiz74@gmail.com>'

# Asegúrate de que la versión de consola ESTÉ comentada o eliminada:
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ---------------------------------------------------------------
# CONFIGURACIÓN DE STRIPE PARA PAGOS
# ---------------------------------------------------------------
STRIPE_PUBLISHABLE_KEY = config("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY") 
STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET")

# ---------------------------------------------------------------
# CONFIGURACIÓN DE LOGGING Y BITÁCORA
# ---------------------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'add_request_info': {
            '()': 'apps.auditlog.filters.RequestInfoFilter',
        },
    },
    'handlers': {
        # Handler para mostrar logs en la consola
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # Handler para guardar logs en un archivo
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 2,
            'formatter': 'verbose',
        },
        # Handler para guardar en la base de datos (nuestra bitácora)
        'database': {
            'level': 'INFO',
            'class': 'apps.auditlog.handlers.DatabaseLogHandler',
            'filters': ['add_request_info'],  # Usamos el filtro para añadir IP y usuario
        },
    },
    'loggers': {
        # Logger para capturar todo lo que pasa en nuestras 'apps'
        'apps': {
            'handlers': ['console', 'file', 'database'],
            'level': 'INFO',
            'propagate': True,
        },
        # Logger para Django en general
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}